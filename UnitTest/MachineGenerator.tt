<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="c:\libs\BDB.Templating.dll" #>
<#@ import namespace="BDB.Templating" #>
<#@ output extension=".cs" #>


<# 
Action<string> write = WriteLine;
Action<bool, string> writeIf = (b,s) => {if (b) {WriteLine(s);}};
//Action<string, string> writeIf = (b,s) => {if (!string.IsNullOrWhiteSpace(b)) {WriteLine(s);}};
var map = new Map();
map.MachineDirectory = System.IO.Path.GetDirectoryName(Host.TemplateFile);
map.LoadMachines();

string pushEnum, stateEnum, className, fileName;

// START MACHINES ================================================
foreach (Machine machine in map.machines) 
{
pushEnum = "sm{0}PUSH".fmt(machine.Name);
stateEnum = "sm{0}STATE".fmt(machine.Name);
className = "sm{0}".fmt(machine.Name);
fileName = "sm{0}_generated.cs".fmt(machine.Name);

write("// Generated " + DateTime.Now.ToString());
write("// Machine " + machine.Name);
machine.Validate();
if (machine.hasErrors)
{
	write("//errors");
	machine.errors.forEach(z => write("//" + z));
	//SaveOutput(fileName);
	continue;
} else {write("//NO errors");}

if (machine.hasWarnings)
{
	write("//warnings");
	machine.warnings.forEach(z => write("//" + z));
} else {write("//NO warnings");}

#>

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using BDB;

namespace UnitTest
{

public enum <#=stateEnum#> { <#=machine.states.print(st => st.Name, ", ")#> }
public enum <#=pushEnum#> { <#=machine.pushes.print(st => st.Name, ", ")#> }

///<summary>
///<#=machine.Info #>
///</summary>
/*<#=						machine.comments.print(c => "{0}:{1}".fmt(c.Author, c.Content), R.CR) #>*/
public sealed partial class <#=className#>
{
	public <#=className#>()
	{
		CurrentState = <#=stateEnum#>.<#=machine.states.First().Name#>;
	}//constructor

	public bool IsCheckOK {get; private set;}
	public bool IsActOK {get; private set;}
	public bool IsPushOK {get; private set;}
	public <#=stateEnum#> CurrentState { get; private set; }

	//devices
	<#=machine.devices.print(z => "public {0} {1};".fmt(z.Type, z.Name), R.CR)#>

<#
Func<Check, string> printCheck = (z) => { 
		StringBuilder result = new StringBuilder();
		Func<string, StringBuilder> line = result.AppendLine;
		line("///<summary>{0}</summary>".fmt(z.Info));
		if (z.Device != null) {
			line("void check{0}()".fmt(z.Name));
			line("{");
			if (z.Test != null)	{line("IsCheckOK = {0}.{1};".fmt(z.Device, z.Test));}
			else {line("IsCheckOK = {0} != null;".fmt(z.Device));}
			line("}");
		}	else {line("partial void check{0}();".fmt(z.Name));}
		return result.ToString();
};
 #>

	//checks
	<#=machine.checks.print(printCheck, R.CR)#>

	//acts
	<#=machine.acts.print(f => "///<summary>{1}</summary>\r\n partial void act{0}();".fmt(f.Name, f.Info), R.CR)#>

public bool Push(<#=pushEnum#> push)
{
	IsPushOK = false;
	switch (push)
	{
<#
foreach (Push push in machine.pushes)
{
	write("case {0}.{1}:".fmt(pushEnum, push.Name));
	foreach (Transition transition in push.transitions)
	{
#>		
if (CurrentState == <#=stateEnum#>.<#=transition.From#>)
{
	<#=transition.checks.print(s => "IsCheckOK = false; check{0}(); if (!IsCheckOK) {{ break; }}".fmt(s), R.CR) #>
	<#=transition.acts.print(s => "IsActOK = false; act{0}(); if (!IsActOK) {{ break; }}".fmt(s), R.CR) #>
	CurrentState = <#=stateEnum#>.<#=transition.To#>;
	IsPushOK = true;
}//if
<#
	}//for
	write("break;");
}//for

#>
	}
	return IsPushOK;
}//function


}//class


}//namespace
<#
//SaveOutput(fileName);
}//for objects
// END MACHINES ================================================
#>



<#+
  void SaveOutput(string outputFileName)
  {
      string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
      string outputFilePath = Path.Combine(templateDirectory, outputFileName);
      File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 

      this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
  }
#>