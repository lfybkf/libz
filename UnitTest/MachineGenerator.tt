<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="c:\libs\BDB.Templating.dll" #>
<#@ import namespace="BDB.Templating" #>
<#@ output extension=".cs" #>



<# 
Action<string> write = WriteLine;
var map = new Map();
map.MachineDirectory = System.IO.Path.GetDirectoryName(Host.TemplateFile);
map.LoadMachines();
#>
// Generated <#=DateTime.Now.ToString() #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using BDB;

namespace Onto
{

<#		foreach (Machine machine in map.machines) {#>
	public sealed partial class <#=						machine.Name #>
	{
	}//class
}//namespace
<#
SaveOutput("sm{0}_generated.cs".fmt(machine.Name));
}//for objects
#>



<#+
  void SaveOutput(string outputFileName)
  {
      string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
      string outputFilePath = Path.Combine(templateDirectory, outputFileName);
      File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 

      this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
  }
#>