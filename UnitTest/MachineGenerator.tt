<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="c:\libs\BDB.Templating.dll" #>
<#@ import namespace="BDB.Templating" #>
<#@ output extension=".cs" #>


<# 
Action<string> write = WriteLine;
Action<bool, string> writeIf = (b,s) => {if (b) {WriteLine(s);}};
var map = new Map();
map.MachineDirectory = System.IO.Path.GetDirectoryName(Host.TemplateFile);
map.LoadMachines();

		write("// Directory = {0}".fmt(map.MachineDirectory));
		write("// Machines.Count = {0}".fmt(map.machines.Count()));

string pushEnum, stateEnum, actEnum, checkEnum, className, fileName;

// START MACHINES ================================================
foreach (Machine machine in map.machines) 
{
pushEnum = "sm{Name}PUSH".fmto(machine);
stateEnum = "sm{Name}STATE".fmto(machine);
actEnum = "sm{Name}ACT".fmto(machine);
checkEnum = "sm{Name}CHECK".fmto(machine);
className = "sm{Name}".fmto(machine);
fileName = "sm{Name}_generated.cs".fmto(machine);

write("// Generated " + DateTime.Now.ToString());
write("// Machine {Name} {TestAttr}".fmto(machine, new {TestAttr = machine["TestAttr"]}));
write("// States.Count = {0}".fmt(machine.states.Count()));
write("// Transitions.Count = {0}".fmt(machine.transitions.Count()));
write("// Pushes.Count = {0}".fmt(machine.pushes.Count()));
write("// Checks.Count = {0}".fmt(machine.checks.Count()));
write("// Act.Count = {0}".fmt(machine.acts.Count()));
write("// Devices.Count = {0}".fmt(machine.devices.Count()));
machine.Validate();
if (machine.hasErrors)
{
	write("//errors");
	machine.errors.forEach(z => write("//" + z));
	//SaveOutput(fileName);
	continue;
} else {write("//NO errors");}

if (machine.hasWarnings)
{
	write("//warnings");
	machine.warnings.forEach(z => write("//" + z));
} else {write("//NO warnings");}

#>

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using BDB;

namespace UnitTest
{

public enum <#=stateEnum#> { <#=machine.states.print(st => st.Name, ", ")#> }
public enum <#=pushEnum#> { <#=machine.pushes.print(st => st.Name, ", ")#> }
public enum <#=actEnum#> { <#=machine.acts.print(st => st.Name, ", ")#> }
public enum <#=checkEnum#> { <#=machine.checks.print(st => st.Name, ", ")#> }

///<summary>
///<#=machine.Info #>
<#=machine.comments.print(c => "///{Author}:{Content}".fmto(c), R.CR) #>
///</summary>
public sealed partial class <#=className#>
{
	public <#=className#>()
	{
		CurrentState = <#=stateEnum#>.<#=machine.states.First().Name#>;
		LastState = CurrentState;
		BadAct = null;
		BadCheck = null;
	}//constructor

	public bool IsCheckOK {get; private set;}
	public bool IsActOK {get; private set;}
	public bool IsPushOK {get; private set;}
	public <#=stateEnum#> CurrentState { get; private set; }
	public <#=stateEnum#> LastState { get; private set; }
	public <#=actEnum#>? BadAct { get; private set; }
	public <#=checkEnum#>? BadCheck { get; private set; }

	#region devices checks acts
<#
write(machine.devices.print(printDevice, R.CR));
write(machine.checks.print(printCheck, R.CR));
write(machine.acts.print(printAct, R.CR));
#>
	#endregion

public IEnumerable<<#=pushEnum#>> availablePushes
{ get {
	IEnumerable<<#=pushEnum#>> result = null;
	switch (CurrentState)
	{

<#
foreach (State state in machine.states)
				{
						write("case {0}.{1}:".fmt(stateEnum, state.Name));
						var transitions = machine.transitions.Where(z => z.From == state.Name);
						var pushes = transitions.SelectMany(z => z.pushes);
						var result = pushes.print(z => "{0}.{1}".fmt(pushEnum, z), ", ");
						write("result = new {0}[] {{ {1} }};".fmt(pushEnum, result) );
						write("break;");
				}//for
#>
	}//switch
return result;
}}

public bool Check(<#=pushEnum#> push)
{
	BadCheck = null;
	IsCheckOK = true;
	switch (push)
	{
<#
foreach (Push push in machine.pushes)
{
	write("case {0}.{1}:".fmt(pushEnum, push.Name));
	foreach (Transition transition in push.transitions.Where(t => t.HasChecks))
	{
#>
if (CurrentState == <#=stateEnum#>.<#=transition.From#>)
{
	<#=transition.checks.print(s => "IsCheckOK = false; check{0}(); if (IsCheckOK == false) {{ BadCheck = {1}.{0}; break; }}".fmt(s, checkEnum), R.CR) #>
}//if
<#
	}//for
	write("break;");
	write("//" + push.Name);
	write("");
}//for
#>
	}

	return IsCheckOK;
}//function

public bool Push(<#=pushEnum#> push)
{
	BadAct = null;
	IsPushOK = Check(push);
	if (IsPushOK == false) {return IsPushOK;}

	switch (push)
	{
<#
foreach (Push push in machine.pushes)
{
	write("case {0}.{1}:".fmt(pushEnum, push.Name));
	foreach (Transition transition in push.transitions)
	{
#>
if (CurrentState == <#=stateEnum#>.<#=transition.From#>)
{
	IsPushOK = false;
	<#=transition.acts.print(s => "IsActOK = false; act{0}(); if (!IsActOK) {{ BadAct = {1}.{0}; break; }}".fmt(s, actEnum), R.CR) #>
	CurrentState = <#=stateEnum#>.<#=transition.To#>;
	IsPushOK = true;
}//if
<#
	}//for
	write("break;");
	write("//" + push.Name);
	write("");
}//for
#>
	}
	return IsPushOK;
}//function


}//class


}//namespace
<#
//SaveOutput(fileName);
}//for objects
// END MACHINES ================================================
#>



<#+
string printDevice(Device z)
{
z.Set("Getter", z.Getter == null 
? "new {Type}()".fmto(z) 
: z.Getter.Replace("Type", z.Type));

				string s = @"///<summary>{Info}</summary>
						public {Type} {Name};
						private {Type} get_{Name}()
						{
						if ({Name} == null) {{Name}={Get(Getter)};}
						return {Name};
						}
						";
return s.fmto(z);
}

string printCheck(Check z)
{ 
z.Set("Check", (z.Test == null 
? "{Device} != null" 
: "get_{Device}().{Test}").fmto(z)
);

string s = @"///<summary>{Info}</summary>
	void check{Name}() { IsCheckOK = {Get(Check)};}";

string sPartial = @"///<summary>{Info}</summary>
	partial void check{Name}();";

return z.Device != null ? s.fmto(z) : sPartial.fmto(z);
}

string printAct(Act z)
{ 
string s = @"///<summary>{Info}</summary>
	void act{Name}() { get_{Device}().{Change}; IsActOK = true;}";

string sPartial = @"///<summary>{Info}</summary>
	partial void act{Name}();";

return z.Device != null ? s.fmto(z) : sPartial.fmto(z);
}



//"
void SaveOutput(string outputFileName)
{
    string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
    string outputFilePath = Path.Combine(templateDirectory, outputFileName);
    File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 

    this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
}

#>