<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<#
Dictionary<string, string> cs2reader = new Dictionary<string, string>()
{
	{"int", "Int32"}, {"long", "Int64"}, 
//	{"uint", "Int32"}, {"ulong", "Int64"}, 
	{"decimal", "Decimal"}, {"float", "Float"}, {"double", "Double"}, 
	{"bool", "Boolean"}, {"DateTime", "DateTime"}
};

//string[] value_types= {"int", "long", "float", "double", "decimal", "DateTime", "bool"};
 #>

//Generated <#=DateTime.Now.ToString() #>

using System;
using System.Data.Common;

namespace BDB
{
	///<summary>see name</summary>
	public static class DbDataReaderExtension
	{
		///<summary>GetString</summary>
		public static string GetString(this DbDataReader reader, string Col)
		{
			int i = reader.GetOrdinal(Col);
			return reader.GetString(i);
		}//func

		///<summary>GetStringNullable</summary>
		public static string GetStringNullable(this DbDataReader reader, string Col)
		{
			int i = reader.GetOrdinal(Col);
			if (reader.IsDBNull(i))
				return null;
			else
				return reader.GetString(i);
		}//func

		///<summary>Get</summary>
		public static string Get(this DbDataReader reader, string Col, string Def)
		{
			int i = reader.GetOrdinal(Col);
			if (reader.IsDBNull(i))
				return Def;
			else
				return reader.GetString(i);
		}//func

<#		foreach (string type in cs2reader.Keys) { #>
/// <summary>
/// Считать значение из колонки. Если IsDBNull, то возвращается Def
/// </summary>
/// <param name="Col">Имя колонки</param>
/// <param name="Def">Значение по умолчанию</param>
/// <param name="reader">reader</param>
public static <#= type #>? Get(this DbDataReader reader, string Col, <#= type #>? Def)
{
	int i = reader.GetOrdinal(Col);
	if (reader.IsDBNull(i))
		return Def;
	else
		return reader.Get<#=cs2reader[type] #>(i);
}//func

/// <summary>
/// Считать значение из колонки без проверки на IsDBNull
/// </summary>
/// <param name="Col">Имя колонки</param>
/// <param name="Def">Значение по умолчанию (используется для overload)</param>
/// <param name="reader">reader</param>
public static <#= type #> Get(this DbDataReader reader, string Col, <#= type #> Def)
{
	int i = reader.GetOrdinal(Col);
	return reader.Get<#=cs2reader[type] #>(i);
}//func

/// <summary>
/// Считать значение из колонки. Если IsDBNull, то возвращается null
/// </summary>
/// <param name="Col">Имя колонки</param>
/// <param name="reader">reader</param>
public static <#= type #>? Get<#=cs2reader[type] #>Nullable(this DbDataReader reader, string Col)
{
	int i = reader.GetOrdinal(Col);
	if (reader.IsDBNull(i))
		return null;
	else
		return reader.Get<#=cs2reader[type] #>(i);
}//func

/// <summary>
/// Считать значение из колонки. Без проверки IsDBNull
/// </summary>
/// <param name="Col">Имя колонки</param>
/// <param name="reader">reader</param>
public static <#= type #> Get<#=cs2reader[type] #>(this DbDataReader reader, string Col)
{
	int i = reader.GetOrdinal(Col);
	return reader.Get<#=cs2reader[type] #>(i);
}//func

<#		}//for #>
	}//class
}//ns
